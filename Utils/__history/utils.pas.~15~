unit utils;

interface

uses
  System.SysUtils,ACBrCEP,ACBrIBGE, System.IniFiles, FireDAC.Comp.Client;

function SomenteNumeros(num: string) : string;
function ValidaCPF(CPF: string): boolean;
function ValidaCNPJ(CNPJ: string): boolean;
function formataCpfCnpj(num : string ):string;
function alltrim(texto:string):string;

procedure criaArquivoini;
procedure abreArquivoIni;

implementation
    uses unitDM,ACBrValidador,ACBrBase;

function SomenteNumeros(num: string):string;
var temp:string; cont:Integer;

begin
     temp:='';
     if Length(Trim(num)) > 0 then
     begin
         for cont := 1 to Length(num) do
         begin
              if  num[cont] in['0'..'9']  then

              temp:=temp+num[cont];
         end;
     end;

    Result:=temp;
end;

function ValidaCPF(CPF: string): boolean;
var  dig10, dig11 : string;
    s, i, r, peso,cont: integer;

begin
     // length - retorna o tamanho da string (CPF é um número formado por 11 dígitos)
     if  ((CPF = '00000000000') or (CPF = '11111111111') or
         (CPF = '22222222222') or (CPF = '33333333333') or
         (CPF = '44444444444') or (CPF = '55555555555') or
         (CPF = '66666666666') or (CPF = '77777777777') or
         (CPF = '88888888888') or (CPF = '99999999999') or
         (length(CPF) <> 11))
     then
     begin
          Result := false;
          exit;
     end;

     // try - protege o código para eventuais erros de conversão de tipo na função StrToInt
     try
           { *-- Cálculo do 1o. Digito Verificador --* }
           s := 0;
           peso := 10;

           for i := 1 to 9 do
           begin
                 // StrToInt converte o i-ésimo caractere do CPF em um número
                 s := s + (StrToInt(CPF[i]) * peso);
                 peso := peso - 1;
           end;

           r := 11 - (s mod 11);

           if ((r = 10) or (r = 11)) then
               dig10 := '0'
           else
               str(r:1, dig10); // converte um número no respectivo caractere numérico

           { *-- Cálculo do 2o. Digito Verificador --* }
           s := 0;
           peso := 11;

           for i := 1 to 10 do
           begin
                 s := s + (StrToInt(CPF[i]) * peso);
                 peso := peso - 1;
           end;

           r := 11 - (s mod 11);

           if  ((r = 10) or (r = 11))then
               dig11 := '0'
           else
               str(r:1, dig11);

           { Verifica se os digitos calculados conferem com os digitos informados. }
           if ((dig10 = CPF[10]) and (dig11 = CPF[11])) then
               Result := true
           else
               Result := false;
     except
           Result := false
     end;
end;

function ValidaCNPJ(CNPJ: string): boolean;
var   dig13, dig14: string;
    sm, i, r, peso: integer;
begin
     // length - retorna o tamanho da string do CNPJ (CNPJ é um número formado por 14 dígitos)
     if ((CNPJ = '00000000000000') or (CNPJ = '11111111111111') or
         (CNPJ = '22222222222222') or (CNPJ = '33333333333333') or
         (CNPJ = '44444444444444') or (CNPJ = '55555555555555') or
         (CNPJ = '66666666666666') or (CNPJ = '77777777777777') or
         (CNPJ = '88888888888888') or (CNPJ = '99999999999999') or
         (length(CNPJ) <> 14))
     then
     begin
          Result := false;
          exit;
     end;

     // "try" - protege o código para eventuais erros de conversão de tipo através da função "StrToInt"
     try
           { *-- Cálculo do 1o. Digito Verificador --* }
           sm := 0;
           peso := 2;
           for i := 12 downto 1 do
           begin
                // StrToInt converte o i-ésimo caractere do CNPJ em um número
                sm := sm + (StrToInt(CNPJ[i]) * peso);
                peso := peso + 1;
                if (peso = 10)then
                    peso := 2;
           end;

           r := sm mod 11;

           if ((r = 0) or (r = 1)) then
              dig13 := '0'
           else
               str((11-r):1, dig13); // converte um número no respectivo caractere numérico

           {  *-- Cálculo do 2o. Digito Verificador --* }
           sm := 0;
           peso := 2;
           for i := 13 downto 1 do
           begin
                sm := sm + (StrToInt(CNPJ[i]) * peso);
                peso := peso + 1;

                if (peso = 10) then
                    peso := 2;
           end;

           r := sm mod 11;

           if ((r = 0) or (r = 1)) then
              dig14 := '0'
           else
               str((11-r):1, dig14);

           { Verifica se os digitos calculados conferem com os digitos informados. }
           if ((dig13 = CNPJ[13]) and (dig14 = CNPJ[14])) then
              Result := true
           else
               Result := false;
     except
           Result := false
     end;
end;

function formataCpfCnpj(num : string ):string;
begin
     num:=SomenteNumeros(num);
     { máscara do CNPJ: 99.999.999.9999-99 }
     if Length(num) = 14 then
     begin
          Result := copy(num, 1, 2) + '.' + copy(num, 3, 3) + '.' +
                  copy(num, 6, 3) + '.' + copy(num, 9, 4) + '-' + copy(num, 13, 2);
     end
     else
     begin
          Result:= Copy(num,1,3)+'.'+Copy(num,4,3)+'.'+Copy(num,7,3)+'-'+Copy(num,10,2);
     end;
end;

function alltrim(texto:string):string;
var i :Integer; temp:string;
 begin
      temp:='';
      if Length(Trim(texto))>=1 then
      begin
           for I := 1 to Length(texto) do
           begin
                if texto[i] <> ' ' then
                   temp:=temp+texto[i];
           end;
      end;
      Result := temp;
 end;

procedure criaArquivoini;
var
  IniFile: TIniFile;
  IniFilePath: string;
begin
     IniFilePath := ExtractFilePath(ParamStr(0)) + 'config.ini';

     if not FileExists(IniFilePath) then
     begin
          IniFile := TIniFile.Create(IniFilePath);
          try
                  IniFile.WriteString('BancoDados', 'Server', '127.0.0.1');
                  IniFile.WriteString('BancoDados', 'Database', '..\CADPESSOA.FDB');
                  IniFile.WriteString('BancoDados', 'User_Name', 'SYSDBA');
                  IniFile.WriteString('BancoDados', 'Password', 'masterkey');
          finally
                 IniFile.Free;
          end;
     end;
end;

procedure abreArquivoini;
var
  IniFile: TIniFile;
  IniFilePath: string;
begin
     criaArquivoini;
     IniFilePath := ExtractFilePath(ParamStr(0)) + 'config.ini';

     IniFile := TIniFile.Create(IniFilePath);
     try
            DM.conBanco.Params.Clear;
            DM.conBanco.Params.Add('Server=' + IniFile.ReadString('BancoDados', 'Server', ''));
            DM.conBanco.Params.Add('Database=' + IniFile.ReadString('BancoDados', 'Database', ''));
            DM.conBanco.Params.Add('User_Name=' + IniFile.ReadString('BancoDados', 'User_Name', ''));
            DM.conBanco.Params.Add('Password=' + IniFile.ReadString('BancoDados', 'Password', ''));
     finally
        IniFile.Free;
     end;

    // Conectar
    DM.conBanco.Connected := True;
end;

end.
